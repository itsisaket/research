<?php

namespace app\controllers;

use Yii;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;

use app\models\Researchpro;
use app\models\Account;
use app\models\Organize;

class ReportController extends Controller
{
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::class,
                'rules' => [
                    [
                        // ‚úÖ ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
                        'actions' => ['index'],
                        'allow'   => true,
                    ],
                ],
            ],
            'verbs' => [
                'class'   => VerbFilter::class,
                'actions' => [],
            ],
        ];
    }

        public function actionIndex()
        {
            $user        = Yii::$app->user->identity;
            $session     = Yii::$app->session;
            $sessionOrg  = $session['ty'] ?? null;
            $isSelfRole  = false;

            if ($user && ($user->position == 1 || $user->position == 2)) {
                $isSelfRole = true;
            }

        /* =========================================================
         * 1. ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡∏õ‡∏µ (5 ‡∏õ‡∏µ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á) ‡∏à‡∏≤‡∏Å tb_researchpro.projectYearsubmit
         * ========================================================= */
        $seriesY     = [];
        $categoriesY = [];

        // ‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏Ñ.‡∏®.) -> ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
        $currentYearAD = (int) date('Y');
        $currentYearTH = $currentYearAD + 543;

        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° 5 ‡∏õ‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏£‡∏ß‡∏°‡∏õ‡∏µ‡∏ô‡∏µ‡πâ)
        $yearsTH = [];
        for ($i = 0; $i < 5; $i++) {
            $yearsTH[] = $currentYearTH - $i;
        }
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ -> ‡∏°‡∏≤‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏ß‡∏¢
        $yearsTH = array_reverse($yearsTH);

        foreach ($yearsTH as $yearTH) {
            $query = Researchpro::find()
                ->where(['projectYearsubmit' => $yearTH]);

            // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
            if ($isSelfRole) {
                // ‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
                $query->andWhere(['uid' => $user->uid]);
            } else {
                // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏µ org ‡πÉ‡∏ô session ‚Üí ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° org ‡∏ô‡∏±‡πâ‡∏ô
                if ($user && $user->position != 4) {
                    if (!empty($sessionOrg)) {
                        $query->andWhere(['org_id' => $sessionOrg]);
                    } elseif (!empty($user->org_id)) {
                        $query->andWhere(['org_id' => $user->org_id]);
                    }
                }
            }

            $count = (int) $query->count();
            $seriesY[]     = $count;
            $categoriesY[] = (string) $yearTH;
        }

        /* =========================================================
         * 2. ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô (org_id)
         * ========================================================= */
        $seriesO     = [];
        $categoriesO = [];

        // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        $orgQuery = Organize::find()->orderBy(['org_id' => SORT_ASC]);
        if ($user && $user->position != 4 && !empty($sessionOrg)) {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà admin ‚Üí ‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏Ñ‡πà‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
            $orgQuery->andWhere(['org_id' => $sessionOrg]);
        }
        $orgs = $orgQuery->all();

        foreach ($orgs as $org) {
            $query = Researchpro::find()->where(['org_id' => $org->org_id]);

            // ‡∏ñ‡πâ‡∏≤‡∏î‡∏π‡πÅ‡∏ö‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (1,2) ‚Üí ‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤
            if ($isSelfRole) {
                $query->andWhere(['uid' => $user->uid]);
            }

            $countOrg = (int) $query->count();

            $seriesO[]     = $countOrg;
            $categoriesO[] = $org->org_name;
        }
        /* =========================================================
        * 3) ‡∏ô‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°)
        * ========================================================= */
        if ($isSelfRole) {
            $uid = $user->uid;

            $counttype1 = Researchpro::find()->where(['uid' => $uid, 'researchTypeID' => 1])->count();
            $counttype2 = Researchpro::find()->where(['uid' => $uid, 'researchTypeID' => 2])->count();
            $counttype3 = Researchpro::find()->where(['uid' => $uid, 'researchTypeID' => 3])->count();
            $counttype4 = Researchpro::find()->where(['uid' => $uid, 'researchTypeID' => 4])->count();

            $countuser  = trim($user->uname . ' ' . $user->luname);
        } else {
            $counttype1 = Researchpro::find()->where(['researchTypeID' => 1])->count();
            $counttype2 = Researchpro::find()->where(['researchTypeID' => 2])->count();
            $counttype3 = Researchpro::find()->where(['researchTypeID' => 3])->count();
            $counttype4 = Researchpro::find()->where(['researchTypeID' => 4])->count();

            $countuser = Account::find()->count();
        }

        /* =========================================================
        * 4) üî• ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô 4 ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô
        *     - budgets (‡∏£‡∏ß‡∏°‡∏á‡∏ö)
        *     - researchTypeID (‡πÅ‡∏à‡∏Å‡πÅ‡∏à‡∏á)
        *     - researchFundID (‡πÅ‡∏à‡∏Å‡πÅ‡∏à‡∏á)
        *     - jobStatusID (‡πÅ‡∏à‡∏Å‡πÅ‡∏à‡∏á)
        *     ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡πâ‡∏≠‡∏á ‚Äú‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‚Äù ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
        * ========================================================= */

        // 4.1 ‡∏£‡∏ß‡∏°‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
        $budgetQuery = Researchpro::find();
        if ($isSelfRole) {
            $budgetQuery->andWhere(['uid' => $user->uid]);
        } else {
            if ($user && $user->position != 4) {
                if (!empty($sessionOrg)) {
                    $budgetQuery->andWhere(['org_id' => $sessionOrg]);
                } elseif (!empty($user->org_id)) {
                    $budgetQuery->andWhere(['org_id' => $user->org_id]);
                }
            }
        }
        // ‡∏ñ‡πâ‡∏≤ budgets ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô int ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡πÉ‡∏ä‡πâ sum ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
        $totalBudgets = (int) $budgetQuery->sum('budgets');

        // 4.2 ‡πÅ‡∏à‡∏Å‡πÅ‡∏à‡∏á‡∏ï‡∏≤‡∏° researchTypeID
        // ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏ö‡∏ö [1 => 10, 2 => 5, ...]
        $typeData = [];
        $typeRows = (clone $budgetQuery)
            ->select(['researchTypeID', 'cnt' => 'COUNT(*)'])
            ->groupBy('researchTypeID')
            ->orderBy('researchTypeID')
            ->asArray()
            ->all();
        foreach ($typeRows as $row) {
            $typeData[$row['researchTypeID']] = (int) $row['cnt'];
        }

        // 4.3 ‡πÅ‡∏à‡∏Å‡πÅ‡∏à‡∏á‡∏ï‡∏≤‡∏° researchFundID
        $fundData = [];
        $fundRows = (clone $budgetQuery)
            ->select(['researchFundID', 'cnt' => 'COUNT(*)'])
            ->groupBy('researchFundID')
            ->orderBy('researchFundID')
            ->asArray()
            ->all();
        foreach ($fundRows as $row) {
            $fundData[$row['researchFundID']] = (int) $row['cnt'];
        }

        // 4.4 ‡πÅ‡∏à‡∏Å‡πÅ‡∏à‡∏á‡∏ï‡∏≤‡∏° jobStatusID
        $statusData = [];
        $statusRows = (clone $budgetQuery)
            ->select(['jobStatusID', 'cnt' => 'COUNT(*)'])
            ->groupBy('jobStatusID')
            ->orderBy('jobStatusID')
            ->asArray()
            ->all();
        foreach ($statusRows as $row) {
            $statusData[$row['jobStatusID']] = (int) $row['cnt'];
        }

        return $this->render('index', [
            // ‡∏Å‡∏£‡∏≤‡∏ü‡∏õ‡∏µ
            'seriesY'     => $seriesY,
            'categoriesY' => $categoriesY,

            // ‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
            'seriesO'     => $seriesO,
            'categoriesO' => $categoriesO,

            // box ‡∏ö‡∏ô
            'counttype1'  => $counttype1,
            'counttype2'  => $counttype2,
            'counttype3'  => $counttype3,
            'counttype4'  => $counttype4,
            'countuser'   => $countuser,

            // ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
            'isSelfRole'  => $isSelfRole,

            // ‚úÖ ‡∏™‡πà‡∏á 4 ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÉ‡∏´‡πâ view
            'totalBudgets' => $totalBudgets,
            'typeData'     => $typeData,
            'fundData'     => $fundData,
            'statusData'   => $statusData,
        ]);
    }
}